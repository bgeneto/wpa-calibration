$(document).ready(function () {

  var received = $('#received');

  var socket = new WebSocket("ws://<web_ip>:<web_port>/ws");

  socket.onmessage = function (message) {
    received.append(message.data);
    received.append('&#013;&#010;');
    /*received.append('<br>');*/
  };

  var sendMessage = function (message) {
    socket.send(message.data);
  };

  // send a command to the serial port
  $("#cmd_send").click(function (ev) {
    ev.preventDefault();
    var cmd = $('#cmd_value').val();
    sendMessage({ 'data': cmd });
    $('#cmd_value').val("");
  });

  $('#clear').click(function () {
    received.empty();
  });

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // pendulum calibration commands
  async function calibrate(cmd) {
    sendMessage({ 'data': cmd });
    await sleep(1000);
    console.log(received.val());
  }

  $("#cal1_send").click(function (ev) {
    ev.preventDefault();
    let id_string = $('#id_string').val();
    if (id_string) {
      cmd_id_string = 'set ID string ' + id_string.trim();
      calibrate(cmd_id_string);
    }
    let max_pos = $('#max_pos').val();
    if (max_pos) {
      cmd_max_pos = 'set maximum position ' + parseFloat(max_pos.trim());
      calibrate(cmd_max_pos);
    }
    let vert_pos = $('#vert_pos').val();
    if (vert_pos) {
      cmd_vert_pos = 'set vertical position ' + parseFloat(vert_pos.trim());
      calibrate(cmd_vert_pos);
    }
    let diameter = $('#diameter').val();
    if (diameter) {
      cmd_diameter = 'set sphere diameter ' + parseFloat(diameter.trim());
      calibrate(cmd_diameter);
    }
    let pulley = $('#pulley').val();
    if (pulley) {
      cmd_pulley = 'set pulley diameter ' + parseFloat(pulley.trim());
      calibrate(cmd_pulley);
    }
    let length = $('#length').val();
    if (length) {
      cmd_length = 'set pendulum length ' + parseFloat(length.trim());
      calibrate(cmd_length);
    }
  });

});